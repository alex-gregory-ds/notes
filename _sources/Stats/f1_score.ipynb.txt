{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8a9ac0ba-6c8b-4ac9-9e1f-af53d02425ab",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "This article covers:\n",
    "\n",
    "* Precision\n",
    "* Recall\n",
    "* F1 Score\n",
    "\n",
    "# Motivation\n",
    "\n",
    "Suppose we are tasked with detecting anomalies in the following dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c4d585ea-46f2-4b5c-9ea6-7b4720445322",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f928fd5fca0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "n = 200\n",
    "f = 4  # Frequency\n",
    "\n",
    "x = np.cos(np.linspace(0, 2 * f * np.pi, n))\n",
    "x[50] = 2\n",
    "x[75] = -1.5\n",
    "\n",
    "y = np.zeros(n)\n",
    "y[50] = 1\n",
    "y[75] = 1\n",
    "\n",
    "outlier_pos = np.argwhere(y)[:, 0]\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(x)\n",
    "ax.scatter(outlier_pos, x[outlier_pos], color=\"tab:orange\", label=\"outliers\")\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b507c9bd-327f-47c1-ab08-487222ad38d5",
   "metadata": {},
   "source": [
    "Our dataset `x` has two outliers. Let us use a simple threshold to find these outliers. A threshold of 1.75 means our model will only capture one of the outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "071cdbc2-70e1-480f-a788-bfd3def79d41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of outliers found: 1\n"
     ]
    }
   ],
   "source": [
    "def find_outliers(x, threshold=1.5):\n",
    "    return (x >= threshold) | (x <= - threshold)\n",
    "\n",
    "y_hat = find_outliers(x, 1.75)\n",
    "print(\"Number of outliers found:\", sum(y_hat))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4819cca-29f9-40e9-b40a-4ad57d354d4f",
   "metadata": {},
   "source": [
    "Now let us calculate the accuracy of our predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11d35a8d-cd1d-4d73-b219-c0a1a6a5a456",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.995"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(y == y_hat).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27c04cfa-7f56-4678-b992-733391645132",
   "metadata": {},
   "source": [
    "The model is 99.5% accuracy. But since this is an outlier detection problem, we know that outliers are going to be rare so have a model that can find the *not anomalous* points is not very useful.\n",
    "\n",
    "In fact, in this example, if our model simply predicted *not anomalous* all the time, then it would have an accuract of 99% since there are 200 data points and 2 anomalies. This highlights the limitations of using accuracy in some problems. What we can use instead is precision and recall.\n",
    "\n",
    "## Precision\n",
    "\n",
    "Precision is a measure of the proportion of predicted positives that were actually true positives."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1a23a9c1-ce1b-46ae-93c0-9727c4efbc70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<img src=\"Images/precision.png\" width=\"200\"/>"
      ],
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.core.display import Image\n",
    "from IPython.display import display\n",
    "\n",
    "display(Image(url='Images/precision.png', width=200))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "000c5c8f-17fa-4807-b7e2-eb68240143f0",
   "metadata": {},
   "source": [
    "The formula for precisions is:\n",
    "\n",
    "$$\n",
    "    \\text{precision} = \\frac{\\text{TP}}{\\text{TP + FP}}\n",
    "$$\n",
    "\n",
    "Let us calculate precision for our example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2c354102-8236-4cc8-9e12-ec11c1e7ead0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TP: 1,  FP: 0\n"
     ]
    }
   ],
   "source": [
    "tp = ((y == 1) & (y_hat == 1)).sum()\n",
    "fp = ((y == 0) & (y_hat == 1)).sum()\n",
    "\n",
    "print(f\"TP: {tp},  FP: {fp}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4281034-2f4c-41a9-95b2-f68bd5148cfb",
   "metadata": {},
   "source": [
    "So, the precisions is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3c884d2e-bcb7-470c-b433-b48bb848455a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 1.0\n"
     ]
    }
   ],
   "source": [
    "precision = tp / (tp + fp)\n",
    "print(f\"Precision: {precision}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f15d46f7-aa10-4c25-8d97-daca316aceb5",
   "metadata": {},
   "source": [
    "So, the precision higher than the accuracy. This metric still misses the fact that one of the true positives has been missed. This is where recall comes in.\n",
    "\n",
    "## Recall\n",
    "\n",
    "Recall is the proportion of actuall positives that were predicted to be positive. It involes true positives and false negatives."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "684892b9-4db2-4bfd-9015-84ad6e4561d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<img src=\"Images/recall.png\" width=\"200\"/>"
      ],
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.core.display import Image\n",
    "from IPython.display import display\n",
    "\n",
    "display(Image(url='Images/recall.png', width=200))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55c1d8cc-11d3-44d9-8b53-ef71f8b4a0f2",
   "metadata": {},
   "source": [
    "The formula for recall is:\n",
    "\n",
    "$$\n",
    "    \\text{recall} = \\frac{\\text{TP}}{\\text{TP} + \\text{FN}}\n",
    "$$\n",
    "\n",
    "Let us calculate recall for our example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "239e51e4-b223-4530-9de6-a3b009ff4300",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5\n"
     ]
    }
   ],
   "source": [
    "tp = ((y == 1) & (y_hat == 1)).sum()\n",
    "fn = ((y == 1) & (y_hat == 0)).sum()\n",
    "\n",
    "recall = tp / (tp + fn)\n",
    "\n",
    "print(recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69b976b0-14ec-4e8e-bc25-3b2a3506f7d1",
   "metadata": {},
   "source": [
    "Our model detect one anomaly correctly but detected the other incorrectly to recall reflects reflects that property well.\n",
    "\n",
    "Recall does not take into account false positives though which may be important. F1 score combines both precision and recall.\n",
    "\n",
    "## F1 Score\n",
    "\n",
    "F1 score is the harmonic mean of precision and recall. We will discuss the harmonic mean later on but for now let create our own version of F1 score using the arithmetic mean (add up your numbers and divide by how many there are). So, the formula for our version of F1 score which we will call $\\hat{F1}$ is:\n",
    "\n",
    "$$\n",
    "    \\hat{F1} = \\frac{\\text{precision} + \\text{recall}}{2}\n",
    "$$\n",
    "\n",
    "Let us calculate $\\hat{F1}$ for our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a19751f5-876d-42b9-9807-3cfd88c9ae86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 hat 0.75\n"
     ]
    }
   ],
   "source": [
    "tp = ((y == 1) & (y_hat == 1)).sum()\n",
    "fp = ((y == 0) & (y_hat == 1)).sum()\n",
    "fn = ((y == 1) & (y_hat == 0)).sum()\n",
    "\n",
    "precision = tp / (tp + fp)\n",
    "recall = tp / (tp + fn)\n",
    "\n",
    "f1_hat = (precision + recall) / 2\n",
    "\n",
    "print(f\"F1 hat: {f1_hat}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "475a774f-c543-45b9-aacf-eb4477177039",
   "metadata": {},
   "source": [
    "$\\hat{F1}$ is slightly higher than recall, so our score has been increased because the model did not predict any false positives."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bdd87ab-86c8-4898-9240-202c1bb51913",
   "metadata": {},
   "source": [
    "# F1 Score\n",
    "\n",
    "F1 score is a method for quantifying the performance of a model. It is typically used for binarcy classification but F1 score can be extended to multiclass problems as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ab9e3e9d-da38-46a2-8856-a92bdf0d7324",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (1.26.4)\n",
      "Requirement already satisfied: scikit-learn in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (1.5.0)\n",
      "Requirement already satisfied: matplotlib in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (3.8.3)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from scikit-learn) (1.13.1)\n",
      "Requirement already satisfied: joblib>=1.2.0 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from scikit-learn) (3.5.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (1.4.5)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (3.1.2)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (4.49.0)\n",
      "Requirement already satisfied: packaging>=20.0 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (24.0)\n",
      "Requirement already satisfied: pillow>=8 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (10.2.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from matplotlib) (1.2.0)\n",
      "Requirement already satisfied: six>=1.5 in /home/alex/documents/notes/.venv/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "%pip install numpy scikit-learn matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b7811b8e-adcd-47e5-9c10-0b8ba8f622b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f48021b-2996-4622-bf14-d1f73cb7377a",
   "metadata": {},
   "source": [
    "Let us create a toy dataset classifying two gaussian distributions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "324820ef-bad7-477d-bb1d-833a38834ed3",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 50\n",
    "x = np.concatenate([\n",
    "    np.random.normal([1, 0], 1, size=(n, 2)),\n",
    "    np.random.normal([-1, 0], 1, size=(n, 2))\n",
    "])\n",
    "y = np.asarray([0] * n + [1] * n)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d40b144-4bc4-42db-b567-60cf13152c06",
   "metadata": {},
   "source": [
    "Plot `x` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3a23d4e6-70a5-4569-951b-bb84941c4bf0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f8815f77790>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x[:n, 0], x[:n, 1], color=\"tab:orange\", label=0)\n",
    "plt.scatter(x[n:, 0], x[n:, 1], color=\"tab:blue\", label=1)\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0638298d-9b2a-4905-a8d3-1fbd05ce8e4b",
   "metadata": {},
   "source": [
    "Let us train a logistic regression model on this data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c5bcf519-6be2-4b61-ba3e-39994e111f45",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = linear_model.LogisticRegression()\n",
    "model.fit(x, y)\n",
    "y_hat = model.predict(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "807f20ca-3ae9-4062-a88d-c847c3832882",
   "metadata": {},
   "source": [
    "Plot the predictions and the true labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "a4766fb2-eb7f-4199-baa2-4342f311f5cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Predictions')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAzkAAAF2CAYAAABNg1aJAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAA9hAAAPYQGoP6dpAABil0lEQVR4nO3de3wU5dk//s9uIAmH7EIwkHCOqYoxFRQNgqhIQQII0latqI94/GoKKtKnFezzkNJqkaqVVhH52Ra0aNHaImA1HhDFA0gV85SYYgsNqJAAgiQQIMHd+f0xzJJN9jCzO4d77vm8Xy9emmXYvSeEueaa+7qv26coigIiIiIiIiJJ+J0eABERERERkZmY5BARERERkVSY5BARERERkVSY5BARERERkVSY5BARERERkVSY5BARERERkVSY5BARERERkVSY5BARERERkVSY5BARERERkVSY5BDZyOfz4Wc/+5nTw0joxhtvRNeuXZ0eBhER6TRw4EDceOONka/ffvtt+Hw+vP3226Z9hhviF1FrTHJIOLW1tZgxYwZOP/10dO7cGZ07d0ZxcTGmT5+Of/zjH04Pz1KjRo2Cz+dL+ivdQHPkyBH87Gc/MzUAEhF51bJly6Ku0dnZ2Tj99NMxY8YM7Nmzx+nh6fbKK68wkSFpdHB6AEStvfzyy/jBD36ADh064LrrrsPgwYPh9/uxdetW/PWvf8XixYtRW1uLAQMGOD1US/z0pz/FrbfeGvn673//O37729/ivvvuw5lnnhl5/eyzz07rc44cOYJ58+YBUBMrIiJK389//nMUFhbi2LFjeO+997B48WK88sorqK6uRufOnW0bx8UXX4yjR48iMzPT0J975ZVXsGjRopiJztGjR9GhA28byT3400rC2L59O6655hoMGDAAa9euRUFBQdTvL1iwAE888QT8/sQTkE1NTejSpYuVQ7XM2LFjo77Ozs7Gb3/7W4wdOzZhMuLmcyYiksX48eNx3nnnAQBuvfVW9OjRA7/+9a+xatUqTJ06td3xVl27/X4/srOzTX1Ps9+PyGosVyNh/OpXv0JTUxOWLl3aLsEBgA4dOuCuu+5Cv379Iq9p60e2b9+OCRMmICcnB9dddx0ANXj86Ec/Qr9+/ZCVlYUzzjgDDz/8MBRFifz5HTt2wOfzYdmyZe0+r21Z2M9+9jP4fD5s27YNN954I7p164ZgMIibbroJR44cifqzzc3NuOeee5CXl4ecnBxMnjwZX375ZZrfoehx1NTU4Nprr0X37t0xcuRIAOqsTKxk6MYbb8TAgQMj55yXlwcAmDdvXtwSuF27dmHKlCno2rUr8vLy8N///d8IhUKmnAMRkReMHj0agFqGnShehcNhLFy4EGeddRays7PRq1cv3H777fj666+j3k9RFNx///3o27cvOnfujEsvvRSffvppu8+Ntybnww8/xIQJE9C9e3d06dIFZ599Nn7zm98AUOPEokWLACCq9E4TK0588sknGD9+PAKBALp27YrvfOc72LhxY9QxWinf+++/j1mzZiEvLw9dunTBd7/7Xezbty/q2I8++gjjxo3DKaecgk6dOqGwsBA333yzzu82UTTO5JAwXn75ZXzrW9/CsGHDDP25b775BuPGjcPIkSPx8MMPo3PnzlAUBZMnT8a6detwyy23YMiQIXjttdfw4x//GLt27cKjjz6a8jivvvpqFBYWYv78+di8eTN+97vfoWfPnliwYEHkmFtvvRXLly/HtddeixEjRuCtt97CxIkTU/7MWK666iqcdtpp+OUvfxmVuCWTl5eHxYsXo7y8HN/97nfxve99D0B0CVwoFMK4ceMwbNgwPPzww3jzzTfxyCOPoKioCOXl5aaeBxGRrLZv3w4A6NGjB4DY8QoAbr/9dixbtgw33XQT7rrrLtTW1uLxxx/HJ598gvfffx8dO3YEAMydOxf3338/JkyYgAkTJmDz5s247LLL0NLSknQsb7zxBi6//HIUFBTg7rvvRn5+Pv75z3/i5Zdfxt13343bb78du3fvxhtvvIE//vGPSd/v008/xUUXXYRAIICf/OQn6NixI5YsWYJRo0bhnXfeaRfL77zzTnTv3h0VFRXYsWMHFi5ciBkzZuD5558HAOzduxeXXXYZ8vLyMHv2bHTr1g07duzAX//6V/3fcKLWFCIBNDQ0KACUKVOmtPu9r7/+Wtm3b1/k15EjRyK/N23aNAWAMnv27Kg/89JLLykAlPvvvz/q9SuvvFLx+XzKtm3bFEVRlNraWgWAsnTp0nafC0CpqKiIfF1RUaEAUG6++eao47773e8qPXr0iHxdVVWlAFB++MMfRh137bXXtnvPZP785z8rAJR169a1G8fUqVPbHX/JJZcol1xySbvXp02bpgwYMCDy9b59++KORfue/vznP496/ZxzzlGGDh2qe+xERF6xdOlSBYDy5ptvKvv27VO++OILZcWKFUqPHj2UTp06KV9++WXcePXuu+8qAJRnn3026vXKysqo1/fu3atkZmYqEydOVMLhcOS4++67TwGgTJs2LfLaunXromLHN998oxQWFioDBgxQvv7666jPaf1e06dPV+LdGraNGVOmTFEyMzOV7du3R17bvXu3kpOTo1x88cXtvjdjxoyJ+qx77rlHycjIUA4ePKgoiqKsXLlSAaD8/e9/j/n5REaxXI2E0NjYCAAxWxePGjUKeXl5kV/adHprbWcXXnnlFWRkZOCuu+6Kev1HP/oRFEXBq6++mvJY77jjjqivL7roIuzfvz9yDq+88goAtPvsmTNnpvyZesZhtljn+Z///MfSzyQicrMxY8YgLy8P/fr1wzXXXIOuXbti5cqV6NOnT+SYtvHqz3/+M4LBIMaOHYuvvvoq8mvo0KHo2rUr1q1bBwB488030dLSgjvvvDOqjExPbPnkk09QW1uLmTNnolu3blG/1/q99AqFQnj99dcxZcoUnHrqqZHXCwoKcO211+K9996LxETN//t//y/qsy666CKEQiHs3LkTACLjevnll3H8+HHDYyJqi+VqJIScnBwAwOHDh9v93pIlS3Do0CHs2bMH119/fbvf79ChA/r27Rv12s6dO9G7d+/I+2q0DmXaRTUV/fv3j/q6e/fuAICvv/4agUAAO3fuhN/vR1FRUdRxZ5xxRsqfGUthYaGp79dadnZ2ZN2Opnv37u3qw4mI6KRFixbh9NNPR4cOHdCrVy+cccYZUc1yYsWrf//732hoaEDPnj1jvufevXsBnIxbp512WtTv5+XlReJQPFrZXElJibETimPfvn04cuRIzLh25plnIhwO44svvsBZZ50VeT1R7ASASy65BN///vcxb948PProoxg1ahSmTJmCa6+9FllZWaaMm7yFSQ4JIRgMoqCgANXV1e1+T6vr3bFjR8w/m5WVlbTjWjzxnmAlWmCfkZER83XFwLoYM3Tq1Kndaz6fL+Y4jDYMiHeOREQUX2lpaaS7Wiyx4lU4HEbPnj3x7LPPxvwzbR84uVWy2Onz+fDiiy9i48aNWLNmDV577TXcfPPNeOSRR7Bx40ZuUk2GsVyNhDFx4kRs27YNmzZtSvu9BgwYgN27d+PQoUNRr2/dujXy+8DJJ0kHDx6MOi6dmZ4BAwYgHA5HnpxpPvvss5TfU6/u3bu3Oxeg/fmkUp5ARETmKyoqwv79+3HhhRdizJgx7X4NHjwYwMm49e9//zvqz+/bty/pLLtWWRDrQWJremNDXl4eOnfuHDOubd26FX6/P6oTqhEXXHABHnjgAXz00Ud49tln8emnn2LFihUpvRd5G5McEsZPfvITdO7cGTfffHPMHaKNzJRMmDABoVAIjz/+eNTrjz76KHw+H8aPHw8ACAQCOOWUU7B+/fqo45544okUzkClvfdvf/vbqNcXLlyY8nvqVVRUhK1bt0a15fy///s/vP/++1HHaR19YiVERERkn6uvvhqhUAi/+MUv2v3eN998E7lOjxkzBh07dsRjjz0WFQ/1xJZzzz0XhYWFWLhwYbvrfuv30vbsSRYbMjIycNlll2HVqlVRVRZ79uzBc889h5EjRyIQCCQdV2tff/11uzg/ZMgQAOq2DERGsVyNhHHaaafhueeew9SpU3HGGWfguuuuw+DBg6EoCmpra/Hcc8/B7/e3q2eOZdKkSbj00kvx05/+FDt27MDgwYPx+uuvY9WqVZg5c2bUeplbb70VDz74IG699Vacd955WL9+Pf71r3+lfB5DhgzB1KlT8cQTT6ChoQEjRozA2rVrsW3btpTfU6+bb74Zv/71rzFu3Djccsst2Lt3L5588kmcddZZUYtAO3XqhOLiYjz//PM4/fTTkZubi5KSEtPqtYmISJ9LLrkEt99+O+bPn4+qqipcdtll6NixI/7973/jz3/+M37zm9/gyiuvjOxXNn/+fFx++eWYMGECPvnkE7z66qs45ZRTEn6G3+/H4sWLMWnSJAwZMgQ33XQTCgoKsHXrVnz66ad47bXXAABDhw4FoDbOGTduHDIyMnDNNdfEfM/7778fb7zxBkaOHIkf/vCH6NChA5YsWYLm5mb86le/Mvx9ePrpp/HEE0/gu9/9LoqKinDo0CE89dRTCAQCmDBhguH3I2KSQ0K54oorsGXLFjzyyCN4/fXX8Yc//AE+nw8DBgzAxIkTcccdd0Sm7hPx+/1YvXo15s6di+effx5Lly7FwIED8dBDD+FHP/pR1LFz587Fvn378OKLL+KFF17A+PHj8eqrr8ZdBKrHH/7wB+Tl5eHZZ5/FSy+9hNGjR+Nvf/tbytP3ep155pl45plnMHfuXMyaNQvFxcX44x//iOeee67dpnC/+93vcOedd+Kee+5BS0sLKioqmOQQETngySefxNChQ7FkyRLcd9996NChAwYOHIjrr78eF154YeS4+++/H9nZ2XjyySexbt06DBs2DK+//rqufdjGjRuHdevWYd68eXjkkUcQDodRVFSE2267LXLM9773Pdx5551YsWIFli9fDkVR4iY5Z511Ft59913MmTMH8+fPRzgcxrBhw7B8+XLD+90BarK3adMmrFixAnv27EEwGERpaSmeffZZSxvtkLx8it2rpYmIiIiIiCzENTlERERERCQVJjlERERERCQVJjlERERERCQVJjlERERERCQVJjlERERERCQVJjlERERERCQVoffJCYfD2L17N3JycuDz+ZweDhGRZyiKgkOHDqF3797w+/k8rDXGJiIiZxiJTUInObt377Z880QiIorviy++QN++fZ0ehlAYm4iInKUnNgmd5OTk5ABQTyQQCDg8GiIi72hsbES/fv0i12E6ibGJiMgZRmKT0EmOVgYQCAQYSIiIHMByrPYYm4iInKUnNrHQmoiIiIiIpMIkh4iIiIiIpMIkh4iIiIiIpCL0mhy9QqEQjh8/7vQwLNGxY0dkZGQ4PQwiIjKIsYmIyDmuTnIURUF9fT0OHjzo9FAs1a1bN+Tn53MBMBGRCzA2ERE5z9VJjhZEevbsic6dO0t3oVUUBUeOHMHevXsBAAUFBQ6PiIiIkmFsIiJynmuTnFAoFAkiPXr0cHo4lunUqRMAYO/evejZs6drygNCYQWbag9g76Fj6JmTjdLCXGT45Qr0RERtMTYJLBwCdn4AHN4DdO0FDBgB+F0wbiJKiaWNBxYvXoyzzz47spfA8OHD8eqrr5ry3lqdc+fOnU15P5Fp5+iW2u7K6jqMXPAWpj61EXevqMLUpzZi5IK3UFld5/TQiIgYm0ziqthUsxpYWAI8fTnwl1vU/y4sUV8nIilZmuT07dsXDz74ID7++GN89NFHGD16NK644gp8+umnpn2GbGUAsbjpHCur61C+fDPqGo5FvV7fcAzlyzcz0SEixzE2mcM151izGnjhBqBxd/TrjXXq60x0iKRkaZIzadIkTJgwAaeddhpOP/10PPDAA+jatSs2btxo5ceSQ0JhBfPW1ECJ8Xvaa/PW1CAUjnUEEZE9GJs8JBwC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",
      "text/plain": [
       "<Figure size 1000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 2, figsize=(10, 4))\n",
    "\n",
    "ax[0].scatter(x[n:, 0], x[n:, 1], label=0)\n",
    "ax[0].scatter(x[:n, 0], x[:n, 1], label=1)\n",
    "ax[0].legend()\n",
    "ax[0].set_title(\"Ground Truth\")\n",
    "\n",
    "ax[1].scatter(x[y_hat == 0, 0], x[y_hat == 0, 1], label=0)\n",
    "ax[1].scatter(x[y_hat == 1, 0], x[y_hat == 1, 1], label=1)\n",
    "ax[1].legend()\n",
    "ax[1].set_title(\"Predictions\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "445ff497-3bbc-49f3-b898-08387611058c",
   "metadata": {},
   "source": [
    "The model clearly gets several predictions wrong. We can break our predictions, `y_hat`, down into for categories:\n",
    "\n",
    "1. `y_hat` is 1 and `y_hat` is 1 (true positive).\n",
    "2. `y_hat` is 1 and `y_hat` is 0 (false negative).\n",
    "3. `y_hat` is 0 and `y_hat` is 1 (false positive).\n",
    "4. `y_hat` is 0 and `y_hat` is 0 (true negative).\n",
    "\n",
    "Let us calculate these quantitites for our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "e6cff610-3552-4d66-b382-2e5371fc0197",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "true_pos: 44,  true_neg: 40,  false_pos: 10,  false_neg: 6\n"
     ]
    }
   ],
   "source": [
    "true_pos = np.sum((y == 1) & (y_hat == 1))\n",
    "true_neg = np.sum((y == 0) & (y_hat == 0))\n",
    "false_pos = np.sum((y == 0) & (y_hat == 1))\n",
    "false_neg = np.sum((y == 1) & (y_hat == 0))\n",
    "\n",
    "print(f\"true_pos: {true_pos},  true_neg: {true_neg},  false_pos: {false_pos},  false_neg: {false_neg}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "935b49dc-e7eb-4fe7-955f-1d4b6515cf0c",
   "metadata": {},
   "source": [
    "Our model gives mostly true positives and true negatives which is good. When assessing the quality of the model, our appetite for false positives and false negatives may depend on our application. For example:\n",
    "\n",
    "* If 1 means a patients has a disease and 0 means they don't, we may be more willing to accept false positives than false negatives.\n",
    "\n",
    "# Precision and Recall\n",
    "\n",
    "Precisions and recall is a way of comparing the actual results with the predicted results.\n",
    "\n",
    "$$\n",
    "\\text{precision} = \\frac{\\text{true positive}}{\\text{true positive} + \\text{false positive}}, \\quad\n",
    "\\text{recall} = \\frac{\\text{true positive}}{\\text{true positive} + \\text{false negative}}\n",
    "$$\n",
    "\n",
    "* Precision is the proportion of positive predictions that were actually positive.\n",
    "* Recall is the proportion of actual positives that were predicted to be positive.\n",
    "\n",
    "Let us write functions to calculate precision and recall."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1c1113ec-3e82-4a05-b3c8-9d4c0bf34018",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 0.8148148148148148,  Recall: 0.88\n"
     ]
    }
   ],
   "source": [
    "def calculate_precision(y, y_hat):\n",
    "    true_pos = np.sum((y == 1) & (y_hat == 1))\n",
    "    false_pos = np.sum((y == 0) & (y_hat == 1))\n",
    "    return true_pos / (true_pos + false_pos)\n",
    "\n",
    "def calculate_recall(y, y_hat):\n",
    "    true_pos = np.sum((y == 1) & (y_hat == 1))\n",
    "    false_neg = np.sum((y == 1) & (y_hat == 0))\n",
    "    return true_pos / (true_pos + false_neg)\n",
    "\n",
    "precision = calculate_precision(y, y_hat)\n",
    "recall = calculate_recall(y, y_hat)\n",
    "\n",
    "print(f\"Precision: {precision},  Recall: {recall}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51eb22bf-9b17-499e-8bff-e458a663e7e8",
   "metadata": {},
   "source": [
    "Precisions would be 1 if we had 0 false positives. Recall would be 1 if we had 0 false negatives.\n",
    "\n",
    "# F1 Score\n",
    "\n",
    "F1 score is the harmonic mean of precision and recall. Let us first recall the definition of harmonic mean. Suppose we have a sequence of numbers $x_1, x_2, \\dots, x_n$. The harmonic mean of this set of numbers is,\n",
    "\n",
    "$$\n",
    "\\frac{n}{x_1^{-1} + x_2^{-1} + \\dots + x_n^{-1}}\n",
    "$$\n",
    "\n",
    "So, the harmonic mean of precision and recall (F1 score) is,\n",
    "\n",
    "$$\n",
    "F1 = \\frac{2}{\\text{precision}^{-1} + \\text{recall}^{-1}} = 2 \\frac{\\text{precision} \\cdot \\text{recall}}{\\text{precision} + \\text{recall}} = \\frac{\\text{2 tp}}{\\text{2 tp} + fp + fn}\n",
    "$$\n",
    "\n",
    "Let us write a function for calculate the F1 score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "8fe37161-50aa-4746-98b0-db1f6aa94d3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 score: 0.8461538461538461\n"
     ]
    }
   ],
   "source": [
    "def calculate_f1(y, y_hat):\n",
    "    recall = calculate_recall(y, y_hat)\n",
    "    precision = calculate_precision(y, y_hat)\n",
    "    return 2 * (precision * recall) / (precision + recall)\n",
    "\n",
    "f1_score = calculate_f1(y, y_hat)\n",
    "print(f\"F1 score: {f1_score}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3258961d-d3cf-4298-a5f4-167dc8559be1",
   "metadata": {},
   "source": [
    "Why is the harmonic mean used when calculating f1 score as opposed to the arithmetic mean?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
